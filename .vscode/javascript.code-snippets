{
    // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "For_i_Loop": {
        "prefix": "fori",
        "body": [
            "for (let i = 0, c = ${1:array}.length; i < c; i++) {",
            "\t${1:array}[i]",
            "}"
        ],
        "description": "For i Loop"
    },
    "For_i--_Loop": {
        "prefix": "fori-",
        "body": [
            "for (let i = ${1:array}.length - 1; i > -1; i--) {",
            "\t${1:array}[i]",
            "}"
        ],
        "description": "For i Loop"
    },
    "For_z_Loop": {
        "prefix": "forz",
        "body": [
            "for (let z = 0, x = ${1:array}.length; z < x; z++) {",
            "\t${1:array}[i]",
            "}"
        ],
        "description": "For z Loop"
    },
    "For_j_Loop": {
        "prefix": "forj",
        "body": [
            "for (let j = 0, k = ${1:array}.length; j < k; j++) {",
            "\t${1:array}[j]",
            "}"
        ],
        "description": "For j Loop"
    },
    "Recursion": {
        "prefix": "_rec",
        "body": [
            "return _recurse(${1:structureInstance});",
            "function _recurse(structure){",
            "\t// Base case",
            "}"
        ],
        "description": "simple recursion"
    },
    "Debouncing": {
        "prefix": "_deb",
        "body": [
            "var functionTimeoutId;",
            "function _debouncingFunction() {",
            "    var context = this,",
            "        args = arguments;",
            "    clearTimeout(historyUpdateTimeoutId);",
            "    historyUpdateTimeoutId = setTimeout(function(){",
            "        historyUpdateTimeoutId = null;",
            "        historyUpdate.apply(context, args);",
            "    }, 200);",
            "}"
        ],
        "description": "simple recursion"
    },
    "DOM_by_Id": {
        "prefix": "byId",
        "body": [
            "D.getElementById('${1:id}')"
        ],
        "description": "getElementById query"
    },
    "DOM_create": {
        "prefix": "crea",
        "body": [
            "D.createElement('${1:tag}')"
        ],
        "description": "createElement"
    },
    "DOM_by_Tag_Name": {
        "prefix": "byT",
        "body": [
            "D.getElementsByTagName('${1:tag}')"
        ],
        "description": "getElementsByTagName query"
    },
    "DOM_by_Class_Name": {
        "prefix": "byC",
        "body": [
            "D.getElementsByClassName('${1:class}')"
        ],
        "description": "getElementsByClassName query"
    },
    "DOM_by_Selector": {
        "prefix": "QS",
        "body": [
            "D.querySelector('${1:selector}')"
        ],
        "description": "querySelector query"
    },
    "DOM_by_Selector_All": {
        "prefix": "QSA",
        "body": [
            "D.querySelectorAll('${1:selector}')"
        ],
        "description": "querySelectorAll query"
    },
    "throw": {
        "prefix": "thrw",
        "body": [
            "throw ${1:variable};"
        ],
        "description": "throws a variable"
    },
    "throw_A": {
        "prefix": "thrA",
        "body": [
            "throw 'A';"
        ],
        "description": "throws 'A'"
    },
    "throw_B": {
        "prefix": "thrB",
        "body": [
            "throw 'B';"
        ],
        "description": "throws 'B'"
    },
    "throw_C": {
        "prefix": "thrC",
        "body": [
            "throw 'C';"
        ],
        "description": "throws 'C'"
    },
    "throw_D": {
        "prefix": "thrD",
        "body": [
            "throw 'D';"
        ],
        "description": "throws 'D'"
    },
    "throw_E": {
        "prefix": "thrE",
        "body": [
            "throw 'E';"
        ],
        "description": "throws 'E'"
    },
    "console_log": {
        "prefix": "logV",
        "body": [
            "console.log(${1:variable});"
        ],
        "description": "console.log"
    },
    "console_log_A": {
        "prefix": "logA",
        "body": [
            "console.log('A');"
        ],
        "description": "console.log('A')"
    },
    "console_log_B": {
        "prefix": "logB",
        "body": [
            "console.log('B');"
        ],
        "description": "console.log('B')"
    },
    "console_log_C": {
        "prefix": "logC",
        "body": [
            "console.log('C');"
        ],
        "description": "console.log('C')"
    },
    "console_log_D": {
        "prefix": "logD",
        "body": [
            "console.log('D');"
        ],
        "description": "console.log('D')"
    },
    "console_log_E": {
        "prefix": "logE",
        "body": [
            "console.log('E');"
        ],
        "description": "console.log('E')"
    },
    "debugger": {
        "prefix": "deb",
        "body": [
            "debugger;"
        ],
        "description": "Sets a breakpoint to walk from."
    },
    "class": {
        "prefix": "class",
        "body": [
            "var Component = require('./component.js');",
            "",
            "//#### ${1:classname}",
            "// <${2:element} id=\"\">",
            "module.exports =",
            "class ${1:classname} extends Component {",
            "\t//# MODEL",
            "\t/**",
            "\t* @param {string} id",
            "\t* @param {{ mode: string; }} app",
            "\t*/",
            "\tconstructor(id, app) {",
            "\t\tsuper(id, app, document);",
            "\t\tlet $ = this;",
            "\t}",
            "};",
        ]
    }
}